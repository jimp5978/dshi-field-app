<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DSHI Dashboard - 검사신청 관리</title>
    <link rel="stylesheet" href="/css/main.css?v=<%= Time.now.to_i %>">
</head>
<body class="inspection-page">
    <div class="header">
        <div class="header-content">
            <div style="display: flex; align-items: center;">
                <!-- <img src="/image/DSHI_logo.jpg" alt="DSHI Logo" style="width: 28px; height: 28px; margin-right: 8px;"> -->
                <h1>📋 DSHI 검사신청 관리</h1>
            </div>
            <div class="user-info">
                👤 <%= (@user_info && @user_info['username']) || 'Unknown' %>님 (Level <%= (@user_info && @user_info['permission_level']) || 'N/A' %>)
                <a href="/" class="nav-btn">🔍 조립품 검색</a>
                <a href="/saved-list" class="nav-btn">📋 저장된 리스트</a>
                <% if (@user_info && @user_info['permission_level'].to_i >= 3) %>
                <a href="/dashboard" class="nav-btn">📊 대시보드</a>
                <% end %>
                <a href="/logout" class="logout-btn">로그아웃</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card">
            <div class="card-header">
                🛠️ 검사신청 관리
            </div>
            <div class="card-body">
                <!-- 탭 네비게이션 -->
                <div class="tab-container">
                    <div class="tab-nav">
                        <button class="tab-btn active" id="activeTab">
                            📋 기본 (대기중/승인됨)
                        </button>
                        <button class="tab-btn" id="completedTab">
                            ✅ 완료 (확정됨/거부됨)
                        </button>
                    </div>
                </div>

                <!-- 필터 섹션 -->
                <div class="filter-section" id="filterSection">
                    <div class="filter-header">
                        <h4>🔍 필터 및 관리 도구<span id="filterIndicator" class="filter-indicator hidden-default">필터 활성</span></h4>
                        <div>
                            <button class="btn btn-primary" onclick="refreshData()">🔄 새로고침</button>
                            <button class="btn btn-primary btn-secondary-custom" onclick="clearFilters()">🗑️ 필터 초기화</button>
                        </div>
                    </div>
                    <!-- Assembly Code 검색 (완료 탭에서만 표시) -->
                    <div class="filter-group hidden-default" id="searchGroup">
                        <div>
                            <label>Assembly Code 검색:</label>
                            <input type="text" id="searchInput" class="search-input search-input-wide" placeholder="Assembly Code를 입력하세요 (예: A001-001)">
                        </div>
                        <div>
                            <button class="btn btn-success" onclick="searchByAssemblyCode()">🔍 검색</button>
                            <button class="btn btn-primary btn-secondary-custom" onclick="clearSearch()">🗑️ 초기화</button>
                        </div>
                    </div>
                    
                    <!-- 여백 추가 (상태와 선택승인 버튼 사이 공간만큼) -->
                    <div class="spacer"></div>
                    
                    <div id="customFilterRow">
                        <div>
                            <div class="label-container">
                                <label>상태:</label>
                            </div>
                            <select id="statusFilter" onchange="filterRequests()">
                                <option value="">전체</option>
                                <option value="대기중">대기중</option>
                                <option value="승인됨">승인됨</option>
                                <option value="거부됨">거부됨</option>
                                <option value="확정됨">확정됨</option>
                            </select>
                        </div>
                        <div>
                            <div class="label-container">
                                <label>검사 타입:</label>
                            </div>
                            <select id="typeFilter" onchange="filterRequests()">
                                <option value="">전체</option>
                                <option value="FIT_UP">FIT-UP</option>
                                <option value="FINAL">FINAL</option>
                                <option value="ARUP_FINAL">ARUP FINAL</option>
                                <option value="GALV">GALV</option>
                                <option value="ARUP_GALV">ARUP GALV</option>
                                <option value="SHOT">SHOT</option>
                                <option value="PAINT">PAINT</option>
                                <option value="ARUP_PAINT">ARUP PAINT</option>
                            </select>
                        </div>
                        <div>
                            <div class="label-container">
                                <label>검사일:</label>
                            </div>
                            <input type="date" id="dateFromFilter">
                        </div>
                        <div>
                            <div class="label-container">
                                <label>~</label>
                            </div>
                            <input type="date" id="dateToFilter">
                        </div>
                        <div>
                            <div class="label-container"></div>
                            <button onclick="filterRequests()">🔍 필터 적용</button>
                        </div>
                    </div>
                    <!-- Level 1 사용자용 일괄 처리 버튼 -->
                    <div class="filter-group filter-group-spaced" id="level1Buttons">
                        <div>
                            <button id="bulkCancelBtn" class="btn btn-danger" onclick="bulkCancel()" disabled>❌ 선택 취소</button>
                        </div>
                        <div id="selectedInfoLevel1" class="selected-info">
                            선택된 항목: 0개
                        </div>
                    </div>
                    
                    <!-- Level 2+ 사용자용 일괄 처리 버튼 -->
                    <div class="filter-group filter-group-spaced" id="adminButtons">
                        <div>
                            <button id="bulkApproveBtn" class="btn btn-success" onclick="bulkApprove()" disabled>✅ 선택 승인</button>
                            <button id="bulkRejectBtn" class="btn btn-danger" onclick="bulkReject()" disabled>❌ 선택 거부</button>
                            <button id="bulkConfirmBtn" class="btn btn-warning" onclick="bulkConfirm()" disabled>🔒 선택 확정</button>
                            <button id="bulkDeleteBtn" class="btn btn-danger" onclick="bulkDelete()" disabled>🗑️ 선택 삭제</button>
                        </div>
                        <div id="selectedInfo" class="selected-info">
                            선택된 항목: 0개
                        </div>
                    </div>
                </div>

                <!-- 검사신청 목록 -->
                <div id="requestsContent">
                    <p>검사신청 내역을 불러오는 중...</p>
                </div>

                <!-- 페이징 (완료 탭에서만 표시) -->
                <div id="paginationContainer" class="pagination pagination-hidden">
                    <button onclick="changePage('prev')" id="prevBtn">이전</button>
                    <div id="pageNumbers"></div>
                    <button onclick="changePage('next')" id="nextBtn">다음</button>
                    <div class="pagination-info">
                        <span id="pageInfo">페이지 1 / 1 (총 0개 항목)</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allRequests = [];
        let filteredRequests = [];
        let currentTab = 'active'; // 'active' or 'completed'
        let currentPage = 1;
        let itemsPerPage = 20;
        let searchResults = null; // 검색 결과 저장
        let isSearchMode = false;
        
        // 날짜 포맷팅 함수 (YYYY-MM-DD 형식으로 변환)
        function formatDate(dateString) {
            if (!dateString || dateString === '-' || dateString === 'null' || dateString === null) {
                return '-';
            }
            
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) {
                    return dateString; // 파싱 실패시 원본 반환
                }
                
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                
                return `${year}-${month}-${day}`;
            } catch (error) {
                return dateString; // 에러시 원본 반환
            }
        }

        // 필터 정렬 강제 적용 함수 (개선된 버전)
        function forceFilterAlignment() {
            const filterRow = document.getElementById('customFilterRow');
            if (filterRow) {
                console.log('🔧 필터 정렬 강제 적용 시작...');
                
                // 기존 모든 스타일을 강제로 제거하고 재설정
                filterRow.removeAttribute('style');
                filterRow.style.cssText = `
                    display: flex !important;
                    gap: 15px !important;
                    align-items: flex-end !important;
                    flex-wrap: wrap !important;
                    margin: 0 !important;
                    padding: 0 !important;
                    min-height: 80px !important;
                `;
                
                // 모든 자식 div 스타일 강제 적용
                const childDivs = filterRow.children;
                console.log(`🔧 처리할 자식 요소 개수: ${childDivs.length}`);
                
                for (let i = 0; i < childDivs.length; i++) {
                    const div = childDivs[i];
                    console.log(`🔧 자식 div ${i} 처리 중...`);
                    
                    div.removeAttribute('style');
                    div.style.cssText = `
                        display: flex !important;
                        flex-direction: column !important;
                        width: auto !important;
                        margin: 0 !important;
                        padding: 0 !important;
                        justify-content: flex-end !important;
                    `;
                    
                    // 라벨 컨테이너 처리
                    const labelContainer = div.querySelector('.label-container');
                    if (labelContainer) {
                        labelContainer.removeAttribute('style');
                        labelContainer.style.cssText = `
                            height: 32px !important;
                            display: flex !important;
                            align-items: flex-end !important;
                            margin: 0 0 8px 0 !important;
                            padding: 0 !important;
                        `;
                        
                        const label = labelContainer.querySelector('label');
                        if (label) {
                            label.style.cssText = `
                                font-weight: 500 !important;
                                line-height: 1 !important;
                                margin: 0 !important;
                                padding: 0 !important;
                                font-size: 14px !important;
                            `;
                        }
                    }
                    
                    // 입력 요소들 처리
                    const select = div.querySelector('select');
                    const input = div.querySelector('input[type="date"]');
                    const button = div.querySelector('button');
                    
                    if (select) {
                        select.removeAttribute('style');
                        select.style.cssText = `
                            height: 48px !important;
                            padding: 10px 12px !important;
                            border: 2px solid #e1e5e9 !important;
                            border-radius: 6px !important;
                            font-size: 14px !important;
                            min-width: 120px !important;
                            box-sizing: border-box !important;
                            margin: 0 !important;
                            line-height: normal !important;
                            vertical-align: bottom !important;
                        `;
                        console.log(`🔧 select 요소 스타일 적용됨: ${select.style.height}`);
                    }
                    
                    if (input) {
                        input.removeAttribute('style');
                        input.style.cssText = `
                            height: 48px !important;
                            padding: 10px 12px !important;
                            border: 2px solid #e1e5e9 !important;
                            border-radius: 6px !important;
                            font-size: 14px !important;
                            min-width: 140px !important;
                            box-sizing: border-box !important;
                            margin: 0 !important;
                            line-height: normal !important;
                            vertical-align: bottom !important;
                        `;
                        console.log(`🔧 input 요소 스타일 적용됨: ${input.style.height}`);
                    }
                    
                    if (button) {
                        button.removeAttribute('style');
                        button.style.cssText = `
                            height: 48px !important;
                            padding: 10px 20px !important;
                            border: none !important;
                            background: #479bbc !important;
                            color: white !important;
                            border-radius: 8px !important;
                            font-size: 14px !important;
                            font-weight: 500 !important;
                            cursor: pointer !important;
                            box-sizing: border-box !important;
                            margin: 0 !important;
                            line-height: normal !important;
                            vertical-align: bottom !important;
                        `;
                        console.log(`🔧 button 요소 스타일 적용됨: ${button.style.height}`);
                    }
                }
                
                // 최종 검증 로그
                console.log('🔧 최종 filterRow 스타일:', window.getComputedStyle(filterRow).display);
                console.log('🔧 최종 filterRow alignItems:', window.getComputedStyle(filterRow).alignItems);
                
                console.log('✅ 필터 정렬 강제 적용 완료 - 개선된 버전');
            } else {
                console.error('❌ customFilterRow 요소를 찾을 수 없습니다');
            }
        }

        // 페이지 로드 시 데이터 불러오기
        document.addEventListener('DOMContentLoaded', function() {
            currentTab = 'active'; // 전역 변수 초기화
            console.log('페이지 로드 완료, currentTab:', currentTab);
            
            // 필터 정렬 강제 적용 (페이지 로드 후 여러 시점에서)
            setTimeout(forceFilterAlignment, 100);
            setTimeout(forceFilterAlignment, 500);
            setTimeout(forceFilterAlignment, 1000);
            setTimeout(forceFilterAlignment, 2000);
            
            // 윈도우 로드 이벤트 후에도 한 번 더 적용
            window.addEventListener('load', function() {
                setTimeout(forceFilterAlignment, 100);
                setTimeout(forceFilterAlignment, 500);
            });
            
            // 종료 날짜를 오늘로 기본 설정
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('dateToFilter').value = today;
            
            // 탭 버튼에 직접 이벤트 리스너 추가 (이중 보장)
            document.getElementById('activeTab').addEventListener('click', function() {
                console.log('기본 탭 클릭됨');
                switchTab('active');
            });
            
            document.getElementById('completedTab').addEventListener('click', function() {
                console.log('완료 탭 클릭됨');
                switchTab('completed');
            });
            
            loadInspectionRequests('active', 1, '');
            switchTab('active'); // 기본탭으로 시작
        });

        // 현재 사용자 권한 레벨 전역 변수
        let currentUserLevel = <%= (@user_info && @user_info['permission_level']) || 1 %>;
        
        // 기존 함수는 호환성을 위해 유지하되 새 함수를 호출
        async function loadInspectionRequests(tab = 'active', page = 1, searchTerm = '') {
            return loadInspectionRequestsWithFilters(tab, page, searchTerm, {});
        }

        // 필터를 지원하는 새로운 함수
        async function loadInspectionRequestsWithFilters(tab = 'active', page = 1, searchTerm = '', filters = {}) {
            try {
                console.log(`=== loadInspectionRequests 시작 ===`);
                console.log(`파라미터 - tab: ${tab}, page: ${page}, searchTerm: "${searchTerm}"`);
                console.log(`전역변수 currentTab: ${currentTab}`);
                
                // 로딩 인디케이터 표시
                showLoadingIndicator();
                
                // POST 방식으로 JSON 데이터 전송
                const requestData = {
                    tab: tab,
                    page: page,
                    per_page: itemsPerPage
                };
                
                if (searchTerm) {
                    requestData.search = searchTerm;
                }
                
                // 필터 파라미터 추가
                if (filters.status) {
                    requestData.status_filter = filters.status;
                }
                if (filters.type) {
                    requestData.type_filter = filters.type;
                }
                if (filters.dateFrom) {
                    requestData.date_from = filters.dateFrom;
                }
                if (filters.dateTo) {
                    requestData.date_to = filters.dateTo;
                }
                
                console.log(`🚀 POST 요청 데이터:`, requestData);
                console.log(`🌐 fetch 호출 시작...`);
                
                // 네트워크 요청 상세 로깅
                console.log(`📝 요청 세부사항:`);
                console.log(`  - Method: POST`);
                console.log(`  - URL: /api/inspection-management/requests`);
                console.log(`  - Body:`, JSON.stringify(requestData));
                
                const response = await fetch('/api/inspection-management/requests', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    },
                    body: JSON.stringify(requestData),
                    cache: 'no-store'
                });
                
                console.log(`📡 응답 상태: ${response.status}`);
                
                const data = await response.json();
                console.log(`📦 API 응답 데이터:`, data);
                
                if (data.success) {
                    // 서버에서 받은 데이터 저장
                    allRequests = data.data.requests || [];
                    currentUserLevel = data.data.user_level || 1;
                    
                    // 페이징 정보 저장
                    if (data.data.pagination) {
                        currentPage = data.data.pagination.current_page;
                        updatePaginationFromServer(data.data.pagination);
                    }
                    
                    // 동적 필터 옵션 업데이트
                    if (data.data.filter_options) {
                        updateFilterOptions(data.data.filter_options);
                    }
                    
                    // Level별 버튼 표시/숨김 처리
                    setupUserInterface();
                    
                    // 결과 표시
                    if (searchTerm) {
                        isSearchMode = true;
                        searchResults = allRequests;
                        renderRequestsList(allRequests);
                        document.getElementById('paginationContainer').style.display = 'none';
                    } else {
                        isSearchMode = false;
                        searchResults = null;
                        renderRequestsList(allRequests);
                        
                        // 완료 탭에서만 페이징 표시
                        if (tab === 'completed') {
                            document.getElementById('paginationContainer').style.display = 'flex';
                        } else {
                            document.getElementById('paginationContainer').style.display = 'none';
                        }
                    }
                    
                } else {
                    document.getElementById('requestsContent').innerHTML = `<p>오류: ${data.error || data.message}</p>`;
                }
            } catch (error) {
                console.error('검사신청 조회 오류:', error);
                document.getElementById('requestsContent').innerHTML = '<p>검사신청 내역을 불러오는 중 오류가 발생했습니다.</p>';
            } finally {
                // 로딩 인디케이터 숨김
                hideLoadingIndicator();
            }
        }

        // 사용자 인터페이스 설정
        function setupUserInterface() {
            if (currentUserLevel === 1) {
                document.getElementById('adminButtons').style.display = 'none';
                document.getElementById('level1Buttons').style.display = 'block';
                document.querySelector('#filterSection h4').innerHTML = '🔍 내 검사신청 상태 확인';
            } else {
                document.getElementById('adminButtons').style.display = 'block';
                document.getElementById('level1Buttons').style.display = 'none';
            }
        }

        // 서버에서 받은 페이징 정보로 UI 업데이트
        function updatePaginationFromServer(pagination) {
            const pageNumbers = document.getElementById('pageNumbers');
            const pageInfo = document.getElementById('pageInfo');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            
            // 페이지 번호 버튼 생성
            let pagesHtml = '';
            const maxVisible = 5;
            let startPage = Math.max(1, pagination.current_page - 2);
            let endPage = Math.min(pagination.total_pages, startPage + maxVisible - 1);
            
            if (endPage - startPage < maxVisible - 1) {
                startPage = Math.max(1, endPage - maxVisible + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const activeClass = i === pagination.current_page ? 'active' : '';
                pagesHtml += `<button class="${activeClass}" onclick="goToPage(${i})">${i}</button>`;
            }
            
            pageNumbers.innerHTML = pagesHtml;
            pageInfo.textContent = `페이지 ${pagination.current_page} / ${pagination.total_pages} (총 ${pagination.total_count}개 항목)`;
            
            // 이전/다음 버튼 상태
            prevBtn.disabled = !pagination.has_prev;
            nextBtn.disabled = !pagination.has_next;
        }

        function renderRequests() {
            const contentDiv = document.getElementById('requestsContent');
            
            
            if (filteredRequests.length === 0) {
                contentDiv.innerHTML = '<div class="empty-state"><h3>📭 검사신청 내역이 없습니다</h3></div>';
                return;
            }
            
            let html = '<div style="overflow-x: auto;"><table id="requestsTable">';
            html += '<thead><tr>';
            
            // 모든 사용자에게 체크박스 열 표시
            html += '<th class="checkbox-cell"><input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()"></th>';
            
            html += '<th>조립품 코드</th>';
            html += '<th>검사 타입</th>';
            html += '<th>신청일</th>';
            html += '<th>신청자</th>';
            html += '<th>검사일</th>';
            html += '<th>상태</th>';
            html += '<th>승인자</th>';
            html += '<th>승인일</th>';
            html += '<th>관리</th>';
            html += '</tr></thead><tbody>';
            
            filteredRequests.forEach((item, index) => {
                const statusClass = getStatusClass(item.status);
                html += '<tr>';
                
                // 모든 사용자에게 체크박스 표시
                html += `<td class="checkbox-cell"><input type="checkbox" class="item-checkbox" data-id="${item.id}" onchange="updateSelectionButtons()"></td>`;
                html += `<td>${item.assembly_code}</td>`;
                html += `<td>${item.inspection_type}</td>`;
                html += `<td>${formatDate(item.created_at)}</td>`;
                html += `<td>${item.requested_by_name}</td>`;
                html += `<td>${formatDate(item.request_date)}</td>`;
                html += `<td><span class="status-badge ${statusClass}">${item.status || '대기중'}</span></td>`;
                html += `<td>${item.approved_by_name || '-'}</td>`;
                html += `<td>${formatDate(item.approved_date)}</td>`;
                html += `<td>`;
                
                // Level 1 사용자: 개별 관리 버튼 없음 (일괄 처리만 사용)
                if (currentUserLevel === 1) {
                    html += '-';
                } 
                // Level 2+ 사용자: 개별 관리 기능
                else {
                    if (item.status === '대기중') {
                        html += `<button class="btn btn-success" onclick="approveRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">승인</button>`;
                        html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">거부</button>`;
                    } else if (item.status === '승인됨' && currentUserLevel >= 3) {
                        html += `<button class="btn btn-warning" onclick="confirmRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">확정</button>`;
                        html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px; margin-left: 4px;">거부</button>`;
                    } else if (item.status === '승인됨' && currentUserLevel >= 2) {
                        // Level 2 사용자는 거부만 가능
                        html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">거부</button>`;
                    } else {
                        html += '-';
                    }
                }
                
                html += `</td>`;
                html += '</tr>';
            });
            
            html += '</tbody></table></div>';
            contentDiv.innerHTML = html;
        }

        function getStatusClass(status) {
            switch(status) {
                case '대기중': return 'status-pending';
                case '승인됨': return 'status-approved';
                case '거부됨': return 'status-rejected';
                case '확정됨': return 'status-confirmed';
                case '취소됨': return 'status-cancelled';
                default: return 'status-pending';
            }
        }

        function filterRequests() {
            // 필터 값들 수집
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;
            
            console.log('필터 적용:', {
                status: statusFilter,
                type: typeFilter,
                dateFrom: dateFromFilter,
                dateTo: dateToFilter
            });
            
            // 로딩 인디케이터 표시
            showLoadingIndicator();
            
            // 필터 활성 상태 업데이트
            updateFilterStatus();
            
            // 필터 파라미터와 함께 API 호출
            loadInspectionRequestsWithFilters(currentTab, 1, '', {
                status: statusFilter,
                type: typeFilter,
                dateFrom: dateFromFilter,
                dateTo: dateToFilter
            });
        }

        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('typeFilter').value = '';
            document.getElementById('dateFromFilter').value = '';
            // 종료 날짜는 오늘로 다시 설정
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('dateToFilter').value = today;
            updateFilterStatus();
            loadInspectionRequests(currentTab, currentPage, '');
        }

        function refreshData() {
            loadInspectionRequests(currentTab, currentPage, '');
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAllCheckbox').checked;
            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.checked = selectAll;
            });
            updateSelectionButtons();
        }

        function updateSelectionButtons() {
            const selected = document.querySelectorAll('.item-checkbox:checked');
            
            // Level 1 사용자용 버튼 업데이트
            const cancelBtn = document.getElementById('bulkCancelBtn');
            const selectedInfoLevel1 = document.getElementById('selectedInfoLevel1');
            if (cancelBtn) {
                cancelBtn.disabled = selected.length === 0;
            }
            if (selectedInfoLevel1) {
                selectedInfoLevel1.textContent = `선택된 항목: ${selected.length}개`;
            }
            
            // Level 2+ 사용자용 버튼 업데이트
            const approveBtn = document.getElementById('bulkApproveBtn');
            const rejectBtn = document.getElementById('bulkRejectBtn');
            const confirmBtn = document.getElementById('bulkConfirmBtn');
            const deleteBtn = document.getElementById('bulkDeleteBtn');
            const selectedInfo = document.getElementById('selectedInfo');
            
            if (approveBtn) {
                approveBtn.disabled = selected.length === 0;
                rejectBtn.disabled = selected.length === 0;
                confirmBtn.disabled = selected.length === 0;
                deleteBtn.disabled = selected.length === 0;
                selectedInfo.textContent = `선택된 항목: ${selected.length}개`;
            }
        }

        async function approveRequest(requestId) {
            if (!confirm('이 검사신청을 승인하시겠습니까?')) return;
            
            try {
                const response = await fetch(`/api/inspection-management/requests/${requestId}/approve`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('✅ 승인되었습니다.');
                    loadInspectionRequests(currentTab, currentPage, '');
                } else {
                    alert(`❌ 승인 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 승인 오류: ${error.message}`);
            }
        }

        async function rejectRequest(requestId) {
            const reason = prompt('거부 사유를 입력하세요:', '거부됨');
            if (!reason) return;
            
            try {
                const response = await fetch(`/api/inspection-management/requests/${requestId}/reject`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reject_reason: reason })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('❌ 거부되었습니다.');
                    loadInspectionRequests(currentTab, currentPage, '');
                } else {
                    alert(`❌ 거부 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 거부 오류: ${error.message}`);
            }
        }

        async function confirmRequest(requestId) {
            const confirmedDate = prompt('검사 완료 날짜를 입력하세요 (YYYY-MM-DD):', new Date().toISOString().split('T')[0]);
            if (!confirmedDate) return;
            
            try {
                const response = await fetch(`/api/inspection-management/requests/${requestId}/confirm`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ confirmed_date: confirmedDate })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('🔒 확정되었습니다.');
                    loadInspectionRequests(currentTab, currentPage, '');
                } else {
                    alert(`❌ 확정 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 확정 오류: ${error.message}`);
            }
        }

        // 로딩 대화상자 표시/숨김 함수
        function showLoadingDialog(title = '🗑️ 삭제 중입니다...', message = '잠시만 기다려주세요. 선택된 항목을 삭제하고 있습니다.') {
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.id = 'loadingOverlay';
            overlay.innerHTML = `
                <div class="loading-dialog">
                    <div class="big-spinner"></div>
                    <h3>${title}</h3>
                    <p>${message}</p>
                </div>
            `;
            document.body.appendChild(overlay);
        }
        
        function hideLoadingDialog() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.remove();
            }
        }
        
        function updateLoadingDialog(title, message = '잠시만 기다려주세요.') {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                const titleElement = overlay.querySelector('h3');
                const messageElement = overlay.querySelector('p');
                if (titleElement) titleElement.textContent = title;
                if (messageElement) messageElement.textContent = message;
            }
        }

        async function bulkDelete() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 삭제하시겠습니까?\n삭제된 검사신청은 복구할 수 없습니다.`)) return;
            
            // 중앙 로딩 대화상자 표시
            showLoadingDialog();
            
            // 모든 버튼 비활성화
            const buttons = ['bulkApproveBtn', 'bulkRejectBtn', 'bulkConfirmBtn', 'bulkDeleteBtn'];
            buttons.forEach(btnId => {
                const btn = document.getElementById(btnId);
                if (btn) btn.disabled = true;
            });
            
            try {
                let successCount = 0;
                let failedItems = [];
                
                // 청크 단위 병렬 처리 (5개씩)
                const chunkSize = 5;
                const totalChunks = Math.ceil(selected.length / chunkSize);
                
                for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
                    const start = chunkIndex * chunkSize;
                    const end = Math.min(start + chunkSize, selected.length);
                    const chunk = selected.slice(start, end);
                    
                    // 진행 상황 업데이트
                    const progressMessage = totalChunks > 1 ? 
                        `🗑️ 삭제 중... (${chunkIndex + 1}/${totalChunks} 그룹 처리 중)` : 
                        '🗑️ 삭제 중...';
                    updateLoadingDialog(progressMessage);
                    
                    // 청크 내에서 병렬 처리
                    const promises = chunk.map(async (checkbox) => {
                        const requestId = checkbox.dataset.id;
                        try {
                            const response = await fetch(`/api/inspection-management/requests/${requestId}`, {
                                method: 'DELETE',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            const result = await response.json();
                            return { success: result.success, requestId };
                        } catch (error) {
                            return { success: false, requestId, error: error.message };
                        }
                    });
                    
                    // 청크 결과 처리
                    const chunkResults = await Promise.all(promises);
                    chunkResults.forEach(result => {
                        if (result.success) {
                            successCount++;
                        } else {
                            failedItems.push({
                                id: result.requestId,
                                error: result.error || '알 수 없는 오류'
                            });
                        }
                    });
                    
                    // 청크 간 짧은 대기 (서버 부하 방지)
                    if (chunkIndex < totalChunks - 1) {
                        await new Promise(resolve => setTimeout(resolve, 100));
                    }
                }
                
                // 상세한 결과 메시지 생성
                let message;
                if (failedItems.length === 0) {
                    message = `✅ 모든 항목이 성공적으로 삭제되었습니다!\n🗑️ 삭제된 항목: ${successCount}개`;
                } else if (successCount === 0) {
                    message = `❌ 모든 항목 삭제에 실패했습니다.\n실패한 항목: ${failedItems.length}개\n\n다시 시도하거나 관리자에게 문의하세요.`;
                } else {
                    message = `⚠️ 일부 항목 삭제가 완료되었습니다.\n✅ 성공: ${successCount}개\n❌ 실패: ${failedItems.length}개\n\n실패한 항목은 다시 선택하여 재시도할 수 있습니다.`;
                }
                
                // 실패 원인이 있을 경우 상세 정보 추가 (최대 3개까지만 표시)
                if (failedItems.length > 0 && failedItems.length <= 3) {
                    message += '\n\n📋 실패 상세:';
                    failedItems.forEach(item => {
                        message += `\n• ID ${item.id}: ${item.error}`;
                    });
                } else if (failedItems.length > 3) {
                    message += `\n\n📋 실패 상세 (일부):`;
                    failedItems.slice(0, 3).forEach(item => {
                        message += `\n• ID ${item.id}: ${item.error}`;
                    });
                    message += `\n... 및 ${failedItems.length - 3}개 더`;
                }
                
                
                alert(message);
                loadInspectionRequests(currentTab, currentPage, '');
                
            } finally {
                // 로딩 대화상자 숨김
                hideLoadingDialog();
                
                // 모든 버튼 다시 활성화
                buttons.forEach(btnId => {
                    const btn = document.getElementById(btnId);
                    if (btn) btn.disabled = false;
                });
                
                // 선택 상태 업데이트
                updateSelectionButtons();
            }
        }

        async function bulkApprove() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 승인하시겠습니까?`)) return;
            
            let successCount = 0;
            let failedItems = [];
            
            for (const checkbox of selected) {
                const requestId = checkbox.dataset.id;
                try {
                    const response = await fetch(`/api/inspection-management/requests/${requestId}/approve`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        successCount++;
                    } else {
                        failedItems.push(requestId);
                    }
                } catch (error) {
                    failedItems.push(requestId);
                }
            }
            
            let message = `✅ ${successCount}개 항목이 승인되었습니다.`;
            if (failedItems.length > 0) {
                message += `\n❌ 실패: ${failedItems.length}개`;
            }
            alert(message);
            loadInspectionRequests(currentTab, currentPage, '');
        }

        async function bulkReject() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            const reason = prompt('거부 사유를 입력하세요:', '거부됨');
            if (!reason) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 거부하시겠습니까?`)) return;
            
            let successCount = 0;
            let failedItems = [];
            
            for (const checkbox of selected) {
                const requestId = checkbox.dataset.id;
                try {
                    const response = await fetch(`/api/inspection-management/requests/${requestId}/reject`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reject_reason: reason })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        successCount++;
                    } else {
                        failedItems.push(requestId);
                    }
                } catch (error) {
                    failedItems.push(requestId);
                }
            }
            
            let message = `❌ ${successCount}개 항목이 거부되었습니다.`;
            if (failedItems.length > 0) {
                message += `\n❌ 실패: ${failedItems.length}개`;
            }
            alert(message);
            loadInspectionRequests(currentTab, currentPage, '');
        }

        async function bulkConfirm() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            const confirmedDate = prompt('검사 완료 날짜를 입력하세요 (YYYY-MM-DD):', new Date().toISOString().split('T')[0]);
            if (!confirmedDate) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 확정하시겠습니까?`)) return;
            
            let successCount = 0;
            let failedItems = [];
            
            for (const checkbox of selected) {
                const requestId = checkbox.dataset.id;
                try {
                    const response = await fetch(`/api/inspection-management/requests/${requestId}/confirm`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ confirmed_date: confirmedDate })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        successCount++;
                    } else {
                        failedItems.push(requestId);
                    }
                } catch (error) {
                    failedItems.push(requestId);
                }
            }
            
            let message = `🔒 ${successCount}개 항목이 확정되었습니다.`;
            if (failedItems.length > 0) {
                message += `\n❌ 실패: ${failedItems.length}개`;
            }
            alert(message);
            loadInspectionRequests(currentTab, currentPage, '');
        }

        // Level 1 사용자용 개별 검사신청 취소 함수
        async function cancelRequest(requestId) {
            if (!confirm('이 검사신청을 취소하시겠습니까?\n취소된 검사신청은 다시 복구할 수 없습니다.')) return;
            
            try {
                const response = await fetch(`/api/inspection-management/requests/${requestId}/cancel`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('✅ 검사신청이 취소되었습니다.');
                    loadInspectionRequests(currentTab, currentPage, '');
                } else {
                    alert(`❌ 취소 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 취소 오류: ${error.message}`);
            }
        }

        // Level 1 사용자용 일괄 검사신청 취소 함수
        async function bulkCancel() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            // 확인 대화상자 없이 바로 로딩 스피너 표시
            showLoadingDialog('❌ 검사신청 취소 중...', '잠시만 기다려주세요. 선택된 항목을 취소하고 있습니다.');
            
            // 모든 버튼 비활성화
            const cancelBtn = document.getElementById('bulkCancelBtn');
            if (cancelBtn) cancelBtn.disabled = true;
            
            try {
                let successCount = 0;
                let failedItems = [];
                
                for (const checkbox of selected) {
                    const requestId = checkbox.dataset.id;
                    try {
                        const response = await fetch(`/api/inspection-management/requests/${requestId}/cancel`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            successCount++;
                        } else {
                            failedItems.push(requestId);
                        }
                    } catch (error) {
                        failedItems.push(requestId);
                    }
                }
                
                // 실패한 항목이 있는 경우에만 메시지 표시 (성공 메시지는 표시하지 않음)
                if (failedItems.length > 0) {
                    alert(`일부 항목 취소에 실패했습니다.\n❌ 실패: ${failedItems.length}개`);
                }
                
                // 목록 새로고침 (취소된 항목들이 자동으로 숨겨짐)
                loadInspectionRequests(currentTab, currentPage, '');
                
            } finally {
                // 로딩 스피너 숨김
                hideLoadingDialog();
                
                // 버튼 다시 활성화
                if (cancelBtn) cancelBtn.disabled = false;
                
                // 선택 상태 업데이트
                updateSelectionButtons();
            }
        }

        // ================= 새로운 탭 및 검색 기능 ================= 

        // 탭 전환 함수
        function switchTab(tabName) {
            console.log(`탭 전환 시도: ${tabName}`);
            console.log(`이전 currentTab: ${currentTab}`);
            
            currentTab = tabName;
            currentPage = 1;
            isSearchMode = false;
            searchResults = null;
            
            console.log(`새로운 currentTab: ${currentTab}`);
            
            // 탭 버튼 스타일 업데이트
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            if (tabName === 'active') {
                document.getElementById('activeTab').classList.add('active');
                // 기본 탭에서는 검색 그룹 숨김
                document.getElementById('searchGroup').style.display = 'none';
                console.log('기본 탭으로 전환됨');
            } else {
                document.getElementById('completedTab').classList.add('active');
                // 완료 탭에서는 검색 그룹 표시
                document.getElementById('searchGroup').style.display = 'flex';
                console.log('완료 탭으로 전환됨');
            }
            
            // 검색 초기화
            if (document.getElementById('searchInput')) {
                document.getElementById('searchInput').value = '';
            }
            
            // 탭 전환 시 종료 날짜를 오늘로 다시 설정
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('dateToFilter').value = today;
            
            // 새 API 호출
            console.log(`API 호출 전 currentTab 확인: ${currentTab}`);
            loadInspectionRequests(tabName, 1, '');
        }


        // 실제 요청 목록 렌더링 (기존 renderRequests 함수 대체)
        function renderRequestsList(requests) {
            const contentDiv = document.getElementById('requestsContent');
            
            if (requests.length === 0) {
                if (isSearchMode) {
                    contentDiv.innerHTML = '<div class="empty-state"><h3>🔍 검색 결과가 없습니다</h3><p>다른 Assembly Code로 검색해보세요.</p></div>';
                } else {
                    contentDiv.innerHTML = '<div class="empty-state"><h3>📭 검사신청 내역이 없습니다</h3></div>';
                }
                return;
            }
            
            let html = '<div style="overflow-x: auto;"><table id="requestsTable">';
            html += '<thead><tr>';
            
            // 체크박스 열 (검색 모드가 아닐 때만)
            if (!isSearchMode) {
                html += '<th class="checkbox-cell"><input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()"></th>';
            }
            
            html += '<th>조립품 코드</th>';
            html += '<th>검사 타입</th>';
            html += '<th>신청일</th>';
            html += '<th>신청자</th>';
            html += '<th>검사일</th>';
            html += '<th>상태</th>';
            
            // 완료 탭에서는 다른 컬럼명 사용
            if (currentTab === 'completed') {
                html += '<th>확정자/거부자</th>';
                html += '<th>확정일/거부일</th>';
            } else {
                html += '<th>승인자</th>';
                html += '<th>승인일</th>';
            }
            
            html += '<th>관리</th>';
            html += '</tr></thead><tbody>';
            
            requests.forEach((item, index) => {
                const statusClass = getStatusClass(item.status);
                html += '<tr>';
                
                // 체크박스 (검색 모드가 아닐 때만)
                if (!isSearchMode) {
                    html += `<td class="checkbox-cell"><input type="checkbox" class="item-checkbox" data-id="${item.id}" onchange="updateSelectionButtons()"></td>`;
                }
                
                html += `<td><strong>${item.assembly_code}</strong></td>`;
                html += `<td>${item.inspection_type}</td>`;
                html += `<td>${formatDate(item.created_at)}</td>`;
                html += `<td>${item.requested_by_name}</td>`;
                html += `<td>${formatDate(item.request_date)}</td>`;
                html += `<td><span class="status-badge ${statusClass}">${item.status || '대기중'}</span></td>`;
                html += `<td>${item.approved_by_name || '-'}</td>`;
                html += `<td>${formatDate(item.approved_date)}</td>`;
                html += `<td>`;
                
                // 관리 버튼들 (검색 모드에서는 간소화)
                if (isSearchMode) {
                    html += '검색 결과';
                } else if (currentUserLevel === 1) {
                    html += '-';
                } else {
                    // Level 2+ 사용자: 개별 관리 기능
                    if (item.status === '대기중') {
                        html += `<button class="btn btn-success" onclick="approveRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">승인</button>`;
                        html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">거부</button>`;
                    } else if (item.status === '승인됨' && currentUserLevel >= 3) {
                        html += `<button class="btn btn-warning" onclick="confirmRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">확정</button>`;
                        html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px; margin-left: 4px;">거부</button>`;
                    } else if (item.status === '승인됨' && currentUserLevel >= 2) {
                        html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">거부</button>`;
                    } else {
                        html += '-';
                    }
                }
                
                html += '</td>';
                html += '</tr>';
            });
            
            html += '</tbody></table></div>';
            contentDiv.innerHTML = html;
        }

        // 페이징 업데이트
        function updatePagination(totalPages, totalItems) {
            const pageNumbers = document.getElementById('pageNumbers');
            const pageInfo = document.getElementById('pageInfo');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            
            // 페이지 번호 버튼 생성
            let pagesHtml = '';
            const maxVisible = 5; // 최대 5개 페이지 번호 표시
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + maxVisible - 1);
            
            if (endPage - startPage < maxVisible - 1) {
                startPage = Math.max(1, endPage - maxVisible + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const activeClass = i === currentPage ? 'active' : '';
                pagesHtml += `<button class="${activeClass}" onclick="goToPage(${i})">${i}</button>`;
            }
            
            pageNumbers.innerHTML = pagesHtml;
            pageInfo.textContent = `페이지 ${currentPage} / ${totalPages} (총 ${totalItems}개 항목)`;
            
            // 이전/다음 버튼 상태
            prevBtn.disabled = currentPage <= 1;
            nextBtn.disabled = currentPage >= totalPages;
        }

        // 페이지 이동
        function changePage(direction) {
            let newPage = currentPage;
            if (direction === 'prev' && currentPage > 1) {
                newPage = currentPage - 1;
            } else if (direction === 'next') {
                newPage = currentPage + 1;
            }
            
            if (newPage !== currentPage) {
                loadInspectionRequests(currentTab, newPage, '');
            }
        }

        function goToPage(page) {
            if (page !== currentPage) {
                loadInspectionRequests(currentTab, page, '');
            }
        }

        // Assembly Code 검색
        function searchByAssemblyCode() {
            const searchTerm = document.getElementById('searchInput').value.trim();
            if (!searchTerm) {
                alert('Assembly Code를 입력하세요.');
                return;
            }
            
            // 서버에서 검색 수행
            loadInspectionRequests(currentTab, 1, searchTerm);
            
            // 검색 후 입력란 리셋
            document.getElementById('searchInput').value = '';
        }

        // 검색 초기화
        function clearSearch() {
            document.getElementById('searchInput').value = '';
            isSearchMode = false;
            searchResults = null;
            loadInspectionRequests(currentTab, 1, '');
        }

        // Enter 키로 검색 (DOM 로드 후 이벤트 리스너 추가)
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchByAssemblyCode();
                    }
                });
            }
        });

        // 로딩 인디케이터 표시/숨김
        function showLoadingIndicator() {
            document.getElementById('requestsContent').innerHTML = `
                <div style="text-align: center; padding: 40px;">
                    <div class="loading-spinner" style="margin: 0 auto 15px auto; width: 30px; height: 30px;"></div>
                    <p style="color: #666; margin: 0;">데이터를 불러오는 중...</p>
                </div>
            `;
        }

        function hideLoadingIndicator() {
            // 로딩 중 메시지 제거 (실제 데이터로 대체됨)
        }
        
        // 필터 옵션을 동적으로 업데이트하는 함수
        function updateFilterOptions(filterOptions) {
            const statusFilter = document.getElementById('statusFilter');
            const typeFilter = document.getElementById('typeFilter');
            
            // 현재 선택된 값 저장
            const currentStatus = statusFilter.value;
            const currentType = typeFilter.value;
            
            // 상태 필터 옵션 업데이트
            const statusOptions = ['<option value="">전체</option>'];
            filterOptions.statuses.forEach(status => {
                const selected = status === currentStatus ? ' selected' : '';
                statusOptions.push(`<option value="${status}"${selected}>${status}</option>`);
            });
            statusFilter.innerHTML = statusOptions.join('');
            
            // 검사타입 필터 옵션 업데이트
            const typeOptions = ['<option value="">전체</option>'];
            filterOptions.types.forEach(type => {
                const selected = type === currentType ? ' selected' : '';
                typeOptions.push(`<option value="${type}"${selected}>${type}</option>`);
            });
            typeFilter.innerHTML = typeOptions.join('');
            
            console.log('필터 옵션 업데이트됨:', filterOptions);
        }
        
        // 필터 활성 상태를 업데이트하는 함수
        function updateFilterStatus() {
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;
            
            const hasActiveFilter = statusFilter || typeFilter || dateFromFilter || dateToFilter;
            const filterSection = document.getElementById('filterSection');
            const filterIndicator = document.getElementById('filterIndicator');
            
            if (hasActiveFilter) {
                filterSection.classList.add('filter-active');
                filterIndicator.style.display = 'inline-block';
            } else {
                filterSection.classList.remove('filter-active');
                filterIndicator.style.display = 'none';
            }
        }

        // 기존 renderRequests 함수를 새 함수로 대체
        function renderRequests() {
            // 탭이 제대로 설정되어 있으면 해당 탭 데이터 로드
            if (currentTab) {
                loadInspectionRequests(currentTab, currentPage, '');
            } else {
                loadInspectionRequests('active', 1, '');
            }
        }
    </script>
</body>
</html>