<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DSHI Dashboard - 관리자 패널</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5; min-height: 100vh;
        }
        .header {
            background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
            color: white; padding: 15px 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .header-content {
            max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center;
        }
        .header h1 { font-size: 24px; font-weight: 500; }
        .user-info { font-size: 14px; }
        .nav-btn, .logout-btn {
            background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3);
            color: white; padding: 8px 16px; border-radius: 6px; text-decoration: none;
            transition: all 0.3s; margin-left: 10px;
        }
        .nav-btn:hover, .logout-btn:hover { background: rgba(255,255,255,0.3); }
        .container { max-width: 1400px; margin: 20px auto; padding: 0 20px; }
        .card {
            background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px; overflow: hidden;
        }
        .card-header {
            background: #f8f9fa; padding: 20px; border-bottom: 1px solid #e9ecef;
            font-size: 18px; font-weight: 600; color: #333;
        }
        .card-body { padding: 20px; }
        .btn {
            padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer;
            font-size: 14px; font-weight: 500; transition: all 0.3s; text-decoration: none;
            display: inline-block; text-align: center; margin-right: 10px;
        }
        .btn-success { background: #28a745; color: white; }
        .btn-danger { background: #dc3545; color: white; }
        .btn-primary { background: #007bff; color: white; }
        .btn-warning { background: #ffc107; color: #212529; }
        .btn:hover { transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        table { width: 100%; border-collapse: collapse; border: 1px solid #ddd; }
        th, td { padding: 12px; border: 1px solid #ddd; text-align: left; font-size: 14px; }
        th { background: #f8f9fa; font-weight: 600; }
        tr:hover { background-color: #f8f9fa; }
        .filter-section {
            background: #e3f2fd; padding: 20px; border-radius: 8px; margin-bottom: 20px;
            border-left: 4px solid #2196F3;
        }
        .filter-group {
            display: flex; gap: 15px; align-items: center; flex-wrap: wrap;
        }
        .filter-group label { font-weight: 500; margin-right: 8px; }
        .filter-group select, .filter-group input {
            padding: 8px 12px; border: 2px solid #e1e5e9; border-radius: 6px;
            font-size: 14px; min-width: 120px;
        }
        .checkbox-cell { text-align: center; width: 50px; }
        .item-checkbox { transform: scale(1.2); cursor: pointer; }
        .status-badge {
            padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500;
        }
        .status-pending { background: #fff3cd; color: #856404; }
        .status-approved { background: #d1ecf1; color: #0c5460; }
        .status-rejected { background: #f8d7da; color: #721c24; }
        .status-confirmed { background: #d4edda; color: #155724; }
        .status-cancelled { background: #f8f9fa; color: #6c757d; }
        .empty-state {
            text-align: center; padding: 60px 20px; color: #666;
        }
        
        /* 로딩 스피너 스타일 */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .btn-loading {
            opacity: 0.7;
            cursor: not-allowed !important;
            pointer-events: none;
        }
        
        /* 중앙 로딩 대화상자 */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .loading-dialog {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            text-align: center;
            min-width: 300px;
        }
        
        .loading-dialog .big-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #FF6B35;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
        
        .loading-dialog h3 {
            margin: 0;
            color: #333;
            font-size: 18px;
            font-weight: 600;
        }
        
        .loading-dialog p {
            margin: 10px 0 0 0;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <h1>🔧 DSHI 관리자 패널</h1>
            <div class="user-info">
                👤 <%= (@user_info && @user_info['username']) || 'Unknown' %>님 (Level <%= (@user_info && @user_info['permission_level']) || 'N/A' %>)
                <a href="/" class="nav-btn">🔍 조립품 검색</a>
                <a href="/saved-list" class="nav-btn">📋 저장된 리스트</a>
                <a href="/inspection-requests" class="nav-btn">📊 검사신청 조회</a>
                <a href="/logout" class="logout-btn">로그아웃</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card">
            <div class="card-header">
                🛠️ 검사신청 관리
            </div>
            <div class="card-body">
                <!-- 필터 섹션 -->
                <div class="filter-section">
                    <h4 style="margin-bottom: 15px;">🔍 필터 및 관리 도구</h4>
                    <div class="filter-group">
                        <div>
                            <label>상태:</label>
                            <select id="statusFilter" onchange="filterRequests()">
                                <option value="">전체</option>
                                <option value="대기중">대기중</option>
                                <option value="승인됨">승인됨</option>
                                <option value="거부됨">거부됨</option>
                                <option value="확정됨">확정됨</option>
                            </select>
                        </div>
                        <div>
                            <label>검사 타입:</label>
                            <select id="typeFilter" onchange="filterRequests()">
                                <option value="">전체</option>
                                <option value="FIT_UP">FIT-UP</option>
                                <option value="FINAL">FINAL</option>
                                <option value="ARUP_FINAL">ARUP FINAL</option>
                                <option value="GALV">GALV</option>
                                <option value="ARUP_GALV">ARUP GALV</option>
                                <option value="SHOT">SHOT</option>
                                <option value="PAINT">PAINT</option>
                                <option value="ARUP_PAINT">ARUP PAINT</option>
                            </select>
                        </div>
                        <div>
                            <label>검사일:</label>
                            <input type="date" id="dateFromFilter" onchange="filterRequests()" style="padding: 8px 12px; border: 2px solid #e1e5e9; border-radius: 6px; font-size: 14px; min-width: 140px;">
                        </div>
                        <div>
                            <label>~</label>
                            <input type="date" id="dateToFilter" onchange="filterRequests()" style="padding: 8px 12px; border: 2px solid #e1e5e9; border-radius: 6px; font-size: 14px; min-width: 140px;">
                        </div>
                        <div>
                            <button class="btn btn-primary" onclick="refreshData()">🔄 새로고침</button>
                            <button class="btn btn-primary" onclick="clearFilters()" style="background: #6c757d;">🗑️ 필터 초기화</button>
                        </div>
                    </div>
                    <div class="filter-group" style="margin-top: 15px;">
                        <div>
                            <button id="bulkApproveBtn" class="btn btn-success" onclick="bulkApprove()" disabled>✅ 선택 승인</button>
                            <button id="bulkRejectBtn" class="btn btn-danger" onclick="bulkReject()" disabled>❌ 선택 거부</button>
                            <button id="bulkConfirmBtn" class="btn btn-warning" onclick="bulkConfirm()" disabled>🔒 선택 확정</button>
                            <button id="bulkDeleteBtn" class="btn" onclick="bulkDelete()" disabled style="background: #dc3545; color: white;">🗑️ 선택 삭제</button>
                        </div>
                        <div id="selectedInfo" style="margin-left: 20px; color: #666;">
                            선택된 항목: 0개
                        </div>
                    </div>
                </div>

                <!-- 검사신청 목록 -->
                <div id="requestsContent">
                    <p>검사신청 내역을 불러오는 중...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allRequests = [];
        let filteredRequests = [];
        
        // 날짜 포맷팅 함수 (YYYY-MM-DD 형식으로 변환)
        function formatDate(dateString) {
            if (!dateString || dateString === '-' || dateString === 'null' || dateString === null) {
                return '-';
            }
            
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) {
                    return dateString; // 파싱 실패시 원본 반환
                }
                
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                
                return `${year}-${month}-${day}`;
            } catch (error) {
                return dateString; // 에러시 원본 반환
            }
        }

        // 페이지 로드 시 데이터 불러오기
        document.addEventListener('DOMContentLoaded', loadInspectionRequests);

        async function loadInspectionRequests() {
            try {
                const response = await fetch('/api/inspection-requests');
                const data = await response.json();
                
                if (data.success) {
                    allRequests = data.data.requests || [];
                    filteredRequests = [...allRequests];
                    renderRequests();
                } else {
                    document.getElementById('requestsContent').innerHTML = `<p>오류: ${data.error}</p>`;
                }
            } catch (error) {
                console.error('검사신청 조회 오류:', error);
                document.getElementById('requestsContent').innerHTML = '<p>검사신청 내역을 불러오는 중 오류가 발생했습니다.</p>';
            }
        }

        function renderRequests() {
            const contentDiv = document.getElementById('requestsContent');
            
            if (filteredRequests.length === 0) {
                contentDiv.innerHTML = '<div class="empty-state"><h3>📭 검사신청 내역이 없습니다</h3></div>';
                return;
            }
            
            let html = '<div style="overflow-x: auto;"><table id="requestsTable">';
            html += '<thead><tr>';
            html += '<th class="checkbox-cell"><input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()"></th>';
            html += '<th>조립품 코드</th>';
            html += '<th>검사 타입</th>';
            html += '<th>신청일</th>';
            html += '<th>검사일</th>';
            html += '<th>신청자</th>';
            html += '<th>상태</th>';
            html += '<th>승인자</th>';
            html += '<th>승인일</th>';
            html += '<th>관리</th>';
            html += '</tr></thead><tbody>';
            
            filteredRequests.forEach((item, index) => {
                const statusClass = getStatusClass(item.status);
                html += '<tr>';
                html += `<td class="checkbox-cell"><input type="checkbox" class="item-checkbox" data-id="${item.id}" onchange="updateSelectionButtons()"></td>`;
                html += `<td>${item.assembly_code}</td>`;
                html += `<td>${item.inspection_type}</td>`;
                html += `<td>${formatDate(item.created_at)}</td>`;
                html += `<td>${formatDate(item.request_date)}</td>`;
                html += `<td>${item.requested_by_name}</td>`;
                html += `<td><span class="status-badge ${statusClass}">${item.status || '대기중'}</span></td>`;
                html += `<td>${item.approved_by_name || '-'}</td>`;
                html += `<td>${formatDate(item.approved_date)}</td>`;
                html += `<td>`;
                
                if (item.status === '대기중') {
                    html += `<button class="btn btn-success" onclick="approveRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">승인</button>`;
                    html += `<button class="btn btn-danger" onclick="rejectRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">거부</button>`;
                } else if (item.status === '승인됨') {
                    html += `<button class="btn btn-warning" onclick="confirmRequest(${item.id})" style="font-size: 12px; padding: 4px 8px;">확정</button>`;
                } else {
                    html += '-';
                }
                
                html += `</td>`;
                html += '</tr>';
            });
            
            html += '</tbody></table></div>';
            contentDiv.innerHTML = html;
        }

        function getStatusClass(status) {
            switch(status) {
                case '대기중': return 'status-pending';
                case '승인됨': return 'status-approved';
                case '거부됨': return 'status-rejected';
                case '확정됨': return 'status-confirmed';
                case '취소됨': return 'status-cancelled';
                default: return 'status-pending';
            }
        }

        function filterRequests() {
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const dateFromFilter = document.getElementById('dateFromFilter').value;
            const dateToFilter = document.getElementById('dateToFilter').value;
            
            filteredRequests = allRequests.filter(request => {
                const matchStatus = !statusFilter || request.status === statusFilter;
                const matchType = !typeFilter || request.inspection_type === typeFilter;
                
                // 검사일 필터링
                let matchDate = true;
                if (dateFromFilter || dateToFilter) {
                    const requestDate = new Date(request.request_date);
                    
                    if (dateFromFilter) {
                        const fromDate = new Date(dateFromFilter);
                        matchDate = matchDate && (requestDate >= fromDate);
                    }
                    
                    if (dateToFilter) {
                        const toDate = new Date(dateToFilter);
                        matchDate = matchDate && (requestDate <= toDate);
                    }
                }
                
                return matchStatus && matchType && matchDate;
            });
            
            renderRequests();
        }

        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('typeFilter').value = '';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';
            filterRequests();
        }

        function refreshData() {
            loadInspectionRequests();
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAllCheckbox').checked;
            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.checked = selectAll;
            });
            updateSelectionButtons();
        }

        function updateSelectionButtons() {
            const selected = document.querySelectorAll('.item-checkbox:checked');
            const approveBtn = document.getElementById('bulkApproveBtn');
            const rejectBtn = document.getElementById('bulkRejectBtn');
            const confirmBtn = document.getElementById('bulkConfirmBtn');
            const deleteBtn = document.getElementById('bulkDeleteBtn');
            const selectedInfo = document.getElementById('selectedInfo');
            
            approveBtn.disabled = selected.length === 0;
            rejectBtn.disabled = selected.length === 0;
            confirmBtn.disabled = selected.length === 0;
            deleteBtn.disabled = selected.length === 0;
            selectedInfo.textContent = `선택된 항목: ${selected.length}개`;
        }

        async function approveRequest(requestId) {
            if (!confirm('이 검사신청을 승인하시겠습니까?')) return;
            
            try {
                const response = await fetch(`/api/inspection-requests/${requestId}/approve`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('✅ 승인되었습니다.');
                    loadInspectionRequests();
                } else {
                    alert(`❌ 승인 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 승인 오류: ${error.message}`);
            }
        }

        async function rejectRequest(requestId) {
            const reason = prompt('거부 사유를 입력하세요:', '거부됨');
            if (!reason) return;
            
            try {
                const response = await fetch(`/api/inspection-requests/${requestId}/reject`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reject_reason: reason })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('❌ 거부되었습니다.');
                    loadInspectionRequests();
                } else {
                    alert(`❌ 거부 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 거부 오류: ${error.message}`);
            }
        }

        async function confirmRequest(requestId) {
            const confirmedDate = prompt('검사 완료 날짜를 입력하세요 (YYYY-MM-DD):', new Date().toISOString().split('T')[0]);
            if (!confirmedDate) return;
            
            try {
                const response = await fetch(`/api/inspection-requests/${requestId}/confirm`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ confirmed_date: confirmedDate })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('🔒 확정되었습니다.');
                    loadInspectionRequests();
                } else {
                    alert(`❌ 확정 실패: ${result.message}`);
                }
            } catch (error) {
                alert(`❌ 확정 오류: ${error.message}`);
            }
        }

        // 로딩 대화상자 표시/숨김 함수
        function showLoadingDialog() {
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.id = 'loadingOverlay';
            overlay.innerHTML = `
                <div class="loading-dialog">
                    <div class="big-spinner"></div>
                    <h3>🗑️ 삭제 중입니다...</h3>
                    <p>잠시만 기다려주세요. 선택된 항목을 삭제하고 있습니다.</p>
                </div>
            `;
            document.body.appendChild(overlay);
        }
        
        function hideLoadingDialog() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.remove();
            }
        }

        async function bulkDelete() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 삭제하시겠습니까?\n삭제된 검사신청은 복구할 수 없습니다.`)) return;
            
            // 중앙 로딩 대화상자 표시
            showLoadingDialog();
            
            // 모든 버튼 비활성화
            const buttons = ['bulkApproveBtn', 'bulkRejectBtn', 'bulkConfirmBtn', 'bulkDeleteBtn'];
            buttons.forEach(btnId => {
                const btn = document.getElementById(btnId);
                if (btn) btn.disabled = true;
            });
            
            try {
                let successCount = 0;
                let failedItems = [];
                
                for (const checkbox of selected) {
                    const requestId = checkbox.dataset.id;
                    try {
                        const response = await fetch(`/api/inspection-requests/${requestId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            successCount++;
                        } else {
                            failedItems.push(requestId);
                        }
                    } catch (error) {
                        failedItems.push(requestId);
                    }
                }
                
                let message = `🗑️ ${successCount}개 항목이 삭제되었습니다.`;
                if (failedItems.length > 0) {
                    message += `\n❌ 실패: ${failedItems.length}개`;
                }
                alert(message);
                loadInspectionRequests();
                
            } finally {
                // 로딩 대화상자 숨김
                hideLoadingDialog();
                
                // 모든 버튼 다시 활성화
                buttons.forEach(btnId => {
                    const btn = document.getElementById(btnId);
                    if (btn) btn.disabled = false;
                });
                
                // 선택 상태 업데이트
                updateSelectionButtons();
            }
        }

        async function bulkApprove() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 승인하시겠습니까?`)) return;
            
            let successCount = 0;
            let failedItems = [];
            
            for (const checkbox of selected) {
                const requestId = checkbox.dataset.id;
                try {
                    const response = await fetch(`/api/inspection-requests/${requestId}/approve`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        successCount++;
                    } else {
                        failedItems.push(requestId);
                    }
                } catch (error) {
                    failedItems.push(requestId);
                }
            }
            
            let message = `✅ ${successCount}개 항목이 승인되었습니다.`;
            if (failedItems.length > 0) {
                message += `\n❌ 실패: ${failedItems.length}개`;
            }
            alert(message);
            loadInspectionRequests();
        }

        async function bulkReject() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            const reason = prompt('거부 사유를 입력하세요:', '거부됨');
            if (!reason) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 거부하시겠습니까?`)) return;
            
            let successCount = 0;
            let failedItems = [];
            
            for (const checkbox of selected) {
                const requestId = checkbox.dataset.id;
                try {
                    const response = await fetch(`/api/inspection-requests/${requestId}/reject`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reject_reason: reason })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        successCount++;
                    } else {
                        failedItems.push(requestId);
                    }
                } catch (error) {
                    failedItems.push(requestId);
                }
            }
            
            let message = `❌ ${successCount}개 항목이 거부되었습니다.`;
            if (failedItems.length > 0) {
                message += `\n❌ 실패: ${failedItems.length}개`;
            }
            alert(message);
            loadInspectionRequests();
        }

        async function bulkConfirm() {
            const selected = Array.from(document.querySelectorAll('.item-checkbox:checked'));
            if (selected.length === 0) return;
            
            const confirmedDate = prompt('검사 완료 날짜를 입력하세요 (YYYY-MM-DD):', new Date().toISOString().split('T')[0]);
            if (!confirmedDate) return;
            
            if (!confirm(`선택된 ${selected.length}개 항목을 확정하시겠습니까?`)) return;
            
            let successCount = 0;
            let failedItems = [];
            
            for (const checkbox of selected) {
                const requestId = checkbox.dataset.id;
                try {
                    const response = await fetch(`/api/inspection-requests/${requestId}/confirm`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ confirmed_date: confirmedDate })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        successCount++;
                    } else {
                        failedItems.push(requestId);
                    }
                } catch (error) {
                    failedItems.push(requestId);
                }
            }
            
            let message = `🔒 ${successCount}개 항목이 확정되었습니다.`;
            if (failedItems.length > 0) {
                message += `\n❌ 실패: ${failedItems.length}개`;
            }
            alert(message);
            loadInspectionRequests();
        }
    </script>
</body>
</html>