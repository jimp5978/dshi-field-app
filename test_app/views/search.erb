<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DSHI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5; min-height: 100vh;
        }
        .header {
            background: linear-gradient(135deg, #2196F3 0%, #21CBF3 100%);
            color: white; padding: 15px 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .header-content {
            max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center;
        }
        .header h1 { font-size: 24px; font-weight: 500; }
        .user-info { font-size: 14px; }
        .logout-btn {
            background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3);
            color: white; padding: 8px 16px; border-radius: 6px; text-decoration: none;
            transition: all 0.3s; margin-left: 15px;
        }
        .logout-btn:hover { background: rgba(255,255,255,0.3); }
        .container { max-width: 1200px; margin: 20px auto; padding: 0 20px; }
        .card {
            background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px; overflow: hidden;
        }
        .card-header {
            background: #f8f9fa; padding: 20px; border-bottom: 1px solid #e9ecef;
            font-size: 18px; font-weight: 600; color: #333;
        }
        .card-body { padding: 20px; }
        .btn {
            padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer;
            font-size: 14px; font-weight: 500; transition: all 0.3s; text-decoration: none;
            display: inline-block; text-align: center;
        }
        .btn-primary { background: #2196F3; color: white; }
        .btn-secondary { background: #6c757d; color: white; }
        .btn:hover { transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        table { width: 100%; border-collapse: collapse; border: 1px solid #ddd; }
        th, td { padding: 12px; border: 1px solid #ddd; text-align: left; }
        th { background: #f8f9fa; font-weight: 600; }
        tr:hover { background-color: #f8f9fa; }
        .status-box { padding: 15px; border-radius: 6px; margin-bottom: 20px; display: none; }
        .status-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status-error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .status-loading { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
        input[type="text"] {
            padding: 12px; border: 2px solid #e1e5e9; border-radius: 6px;
            font-size: 16px; transition: all 0.3s; width: 200px;
        }
        input[type="text"]:focus {
            outline: none; border-color: #2196F3; box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }
        .checkbox-cell { text-align: center; width: 50px; }
        .item-checkbox, #selectAllCheckbox { transform: scale(1.2); cursor: pointer; }
        .selection-info {
            margin-top: 15px; padding: 15px; background: #e3f2fd; border-radius: 6px;
            border-left: 4px solid #2196F3; display: none;
        }
        
        /* 로딩 스피너 스타일 */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .btn-loading {
            opacity: 0.7;
            cursor: not-allowed !important;
            pointer-events: none;
        }
        
        /* 중앙 로딩 대화상자 */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .loading-dialog {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            text-align: center;
            min-width: 300px;
        }
        
        .loading-dialog .big-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #2196F3;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
        
        .loading-dialog h3 {
            margin: 0;
            color: #333;
            font-size: 18px;
            font-weight: 600;
        }
        
        .loading-dialog p {
            margin: 10px 0 0 0;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div style="display: flex; align-items: center;">
                <!-- <img src="/image/DSHI_logo.jpg" alt="DSHI Logo" style="width: 28px; height: 28px; margin-right: 8px;"> -->
                <h1 style="margin: 0;">DSHI</h1>
            </div>
            <div class="user-info">
                👤 <%= @user_info['username'] || 'Unknown' %>님 (Level <%= @user_info['permission_level'] || 'N/A' %>)
                <a href="/saved-list" class="logout-btn">📋 저장된 리스트</a>
                <a href="/inspection-management" class="logout-btn">📋 검사신청 관리</a>
                <a href="/logout" class="logout-btn">로그아웃</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card">
            <div class="card-header">
                🔍 Assembly No 검색
            </div>
            <div class="card-body">
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                    <form id="searchForm">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500;">Assembly No (끝 3자리)</label>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <input type="text" id="searchInput" placeholder="예: 001, 123, 420" 
                                   maxlength="3" pattern="[0-9]{1,3}" required style="flex: 1;">
                            <button type="submit" class="btn btn-primary" id="searchBtn">검색</button>
                        </div>
                    </form>
                </div>

                <div id="searchStatus" class="status-box">
                    <span id="statusMessage"></span>
                </div>

                <div id="searchResults" style="display: none;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <h3 id="resultsTitle">검색 결과</h3>
                        <div>
                            <button id="addToListBtn" class="btn btn-primary" disabled>선택항목 저장</button>
                        </div>
                    </div>

                    <div style="overflow-x: auto;">
                        <table id="resultsTable">
                            <thead>
                                <tr>
                                    <th class="checkbox-cell">
                                        <input type="checkbox" id="selectAllCheckbox">
                                    </th>
                                    <th>Assembly No</th>
                                    <th>Zone</th>
                                    <th>Item</th>
                                    <th>Weight(NET)</th>
                                    <th>Status</th>
                                    <th>Last Process</th>
                                </tr>
                            </thead>
                            <tbody id="resultsBody"></tbody>
                        </table>
                    </div>

                    <div id="selectionInfo" class="selection-info">
                        <strong>선택된 항목:</strong> <span id="selectedCount">0</span>개 
                        | <strong>총 중량:</strong> <span id="totalWeight">0</span> kg
                    </div>
                </div>
            </div>
        </div>

        <div class="card" style="background: #f8f9fa; display: none;">
            <div class="card-header">🐛 Debug 정보</div>
            <div class="card-body">
                <div style="font-family: monospace; font-size: 12px; color: #666;">
                    <strong>사용자:</strong> <%= @user_info['username'] || 'Unknown' %> (Level <%= @user_info['permission_level'] || 'N/A' %>)<br>
                    <strong>Flask API:</strong> <%= @flask_api_url %><br>
                    <strong>현재 시간:</strong> <span id="currentTime"></span><br>
                    <strong>검색 로그:</strong><br>
                    <div id="searchLog" style="max-height: 200px; overflow-y: auto; background: white; padding: 10px; margin-top: 5px; border: 1px solid #ddd;">
                        - 검색 준비 완료<br>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 로딩 다이얼로그 함수들
        function showLoadingDialog(title = '💾 항목 저장 중...', message = '잠시만 기다려주세요. 선택된 항목을 저장하고 있습니다.') {
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.id = 'loadingOverlay';
            overlay.innerHTML = `
                <div class="loading-dialog">
                    <div class="big-spinner"></div>
                    <h3>${title}</h3>
                    <p>${message}</p>
                </div>
            `;
            document.body.appendChild(overlay);
        }
        
        function hideLoadingDialog() {
            debugLog('hideLoadingDialog 호출됨');
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.remove();
                debugLog('로딩 오버레이 제거 완료');
            } else {
                debugLog('로딩 오버레이를 찾을 수 없음');
                // 강제로 모든 로딩 오버레이 제거
                const allOverlays = document.querySelectorAll('.loading-overlay');
                allOverlays.forEach(o => o.remove());
                if (allOverlays.length > 0) {
                    debugLog(`${allOverlays.length}개의 추가 로딩 오버레이를 강제 제거함`);
                }
            }
        }

        function debugLog(message) {
            console.log('🐛 DEBUG:', message);
            const logElement = document.getElementById('searchLog');
            const timestamp = new Date().toLocaleTimeString();
            logElement.innerHTML += `[${timestamp}] ${message}<br>`;
            logElement.scrollTop = logElement.scrollHeight;
        }
        
        function showStatus(message, type = 'info') {
            const statusElement = document.getElementById('searchStatus');
            const messageElement = document.getElementById('statusMessage');
            
            messageElement.textContent = message;
            statusElement.style.display = 'block';
            statusElement.className = 'status-box status-' + type;
        }
        
        function displayResults(assemblies) {
            const tbody = document.getElementById('resultsBody');
            const resultsDiv = document.getElementById('searchResults');
            const titleElement = document.getElementById('resultsTitle');
            
            tbody.innerHTML = '';
            
            if (assemblies.length === 0) {
                showStatus('검색 결과가 없습니다.', 'error');
                resultsDiv.style.display = 'none';
                return;
            }
            
            titleElement.textContent = `검색 결과 (${assemblies.length}개)`;
            resultsDiv.style.display = 'block';
            
            debugLog(`첫 번째 항목: ${JSON.stringify(assemblies[0], null, 2)}`);
            
            assemblies.forEach((assembly, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="checkbox-cell">
                        <input type="checkbox" class="item-checkbox" data-index="${index}" data-assembly='${JSON.stringify(assembly)}'>
                    </td>
                    <td>${assembly.assembly_code || 'N/A'}</td>
                    <td>${assembly.zone || 'N/A'}</td>
                    <td>${assembly.item || 'N/A'}</td>
                    <td style="text-align: right;">${assembly.weight_net || '0'}</td>
                    <td>${assembly.status || '-'}</td>
                    <td>${assembly.lastProcess || '-'}</td>
                `;
                tbody.appendChild(row);
            });
            
            updateSelectionHandlers();
            updateSelectionInfo();
            showStatus(`${assemblies.length}개의 조립품을 찾았습니다.`, 'success');
            debugLog(`검색 결과 표시 완료: ${assemblies.length}개`);
        }
        
        function updateSelectionHandlers() {
            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectionInfo);
            });
            
            document.getElementById('selectAllCheckbox').addEventListener('change', function() {
                const isChecked = this.checked;
                document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
                updateSelectionInfo();
            });
        }
        
        function updateSelectionInfo() {
            const checkboxes = document.querySelectorAll('.item-checkbox:checked');
            const count = checkboxes.length;
            let totalWeight = 0;
            
            checkboxes.forEach(checkbox => {
                const assembly = JSON.parse(checkbox.dataset.assembly);
                totalWeight += parseFloat(assembly.weight_net || 0);
            });
            
            document.getElementById('selectedCount').textContent = count;
            document.getElementById('totalWeight').textContent = totalWeight.toFixed(2);
            document.getElementById('selectionInfo').style.display = count > 0 ? 'block' : 'none';
            document.getElementById('addToListBtn').disabled = count === 0;
            
            debugLog(`선택 업데이트: ${count}개, 총 중량: ${totalWeight.toFixed(2)}kg`);
        }
        
        async function performSearch(searchTerm) {
            debugLog(`검색 시작: "${searchTerm}"`);
            showStatus('검색 중...', 'loading');
            
            try {
                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: searchTerm })
                });
                
                debugLog(`API 응답: ${response.status}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                const assemblies = data.data || [];
                debugLog(`응답 데이터 수신: ${assemblies.length}개`);
                
                if (!data.success) {
                    throw new Error(data.error || '검색 실패');
                }
                
                displayResults(assemblies);
                
            } catch (error) {
                debugLog(`검색 오류: ${error.message}`);
                showStatus(`검색 오류: ${error.message}`, 'error');
                document.getElementById('searchResults').style.display = 'none';
            }
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('조립품 검색 페이지 로드 완료');
            
            // 페이지 로드 시 기존 로딩 다이얼로그 정리
            const existingOverlays = document.querySelectorAll('.loading-overlay');
            if (existingOverlays.length > 0) {
                existingOverlays.forEach(overlay => overlay.remove());
                debugLog(`페이지 로드 시 ${existingOverlays.length}개의 기존 로딩 오버레이 제거`);
            }
            
            function updateTime() {
                document.getElementById('currentTime').textContent = new Date().toLocaleString();
            }
            updateTime();
            setInterval(updateTime, 1000);
            
            const searchForm = document.getElementById('searchForm');
            const searchInput = document.getElementById('searchInput');
            const searchBtn = document.getElementById('searchBtn');
            
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const searchTerm = searchInput.value.trim();
                if (searchTerm.length === 0) {
                    alert('검색어를 입력해주세요.');
                    return;
                }
                
                if (!/^[0-9]{1,3}$/.test(searchTerm)) {
                    alert('숫자 1-3자리만 입력 가능합니다.');
                    return;
                }
                
                searchBtn.textContent = '검색 중...';
                searchBtn.disabled = true;
                
                performSearch(searchTerm).finally(() => {
                    searchBtn.textContent = '검색';
                    searchBtn.disabled = false;
                });
            });
            
            searchInput.addEventListener('input', function(e) {
                this.value = this.value.replace(/[^0-9]/g, '');
            });
            
            
            document.getElementById('addToListBtn').addEventListener('click', async function() {
                const selected = document.querySelectorAll('.item-checkbox:checked');
                const selectedData = Array.from(selected).map(cb => JSON.parse(cb.dataset.assembly));
                
                let totalWeight = 0;
                selectedData.forEach(item => totalWeight += parseFloat(item.weight_net || 0));
                
                debugLog(`저장 리스트 추가 시도: ${selected.length}개, ${totalWeight.toFixed(2)}kg`);
                
                // 로딩 스피너 표시
                showLoadingDialog();
                debugLog('로딩 다이얼로그 표시 완료');
                
                try {
                    debugLog('Fetch 요청 시작...');
                    const response = await fetch('/api/save-list', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ items: selectedData })
                    });
                    
                    debugLog(`HTTP 응답 수신: ${response.status} ${response.statusText}`);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    const result = await response.json();
                    debugLog(`응답 JSON 파싱 완료: ${JSON.stringify(result)}`);
                    
                    if (result.success) {
                        debugLog('저장 성공 - UI 업데이트 시작');
                        debugLog(`저장 완료: 총 ${result.total}개 항목`);
                        
                        // 저장된 항목들의 체크박스 해제 및 검색 결과에서 제거
                        const savedAssemblyCodes = selectedData.map(item => item.assembly_code);
                        const remainingRows = Array.from(document.querySelectorAll('#resultsTable tbody tr')).filter(row => {
                            const checkbox = row.querySelector('.item-checkbox');
                            const assembly = JSON.parse(checkbox.dataset.assembly);
                            return !savedAssemblyCodes.includes(assembly.assembly_code);
                        });
                        
                        const tbody = document.getElementById('resultsBody');
                        tbody.innerHTML = '';
                        remainingRows.forEach(row => tbody.appendChild(row));
                        
                        // UI 업데이트
                        updateSelectionInfo();
                        const remainingCount = remainingRows.length;
                        if (remainingCount === 0) {
                            document.getElementById('searchResults').style.display = 'none';
                            showStatus('모든 검색 결과가 저장되었습니다.', 'success');
                        } else {
                            document.getElementById('resultsTitle').textContent = `검색 결과 (${remainingCount}개)`;
                            showStatus(`${selectedData.length}개 항목이 저장되었습니다.`, 'success');
                        }
                        
                        debugLog('UI 업데이트 완료 - 스피너 제거');
                        // 즉시 스피너 제거
                        hideLoadingDialog();
                    } else {
                        debugLog(`저장 실패: ${result.error}`);
                        // 로딩 숨기기
                        hideLoadingDialog();
                        
                        alert(`❌ 저장 실패: ${result.error}`);
                        debugLog(`저장 실패: ${result.error}`);
                    }
                } catch (error) {
                    debugLog(`예외 발생: ${error.name} - ${error.message}`);
                    // 로딩 숨기기
                    hideLoadingDialog();
                    
                    alert(`❌ 저장 오류: ${error.message}`);
                    debugLog(`저장 오류: ${error.message}`);
                }
            });
            
            searchInput.focus();
            debugLog('모든 이벤트 리스너 설정 완료');
        });
    </script>
</body>
</html>