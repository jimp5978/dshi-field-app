<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DSHI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5; min-height: 100vh;
        }
        .header {
            background: linear-gradient(135deg, #4CAF50 0%, #66BB6A 100%);
            color: white; padding: 15px 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .header-content {
            max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center;
        }
        .header h1 { font-size: 24px; font-weight: 500; }
        .user-info { font-size: 14px; }
        .nav-btn, .logout-btn {
            background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3);
            color: white; padding: 8px 16px; border-radius: 6px; text-decoration: none;
            transition: all 0.3s; margin-left: 10px;
        }
        .nav-btn:hover, .logout-btn:hover { background: rgba(255,255,255,0.3); }
        .container { max-width: 1200px; margin: 20px auto; padding: 0 20px; }
        .card {
            background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px; overflow: hidden;
        }
        .card-header {
            background: #f8f9fa; padding: 20px; border-bottom: 1px solid #e9ecef;
            font-size: 18px; font-weight: 600; color: #333;
        }
        .card-body { padding: 20px; }
        .btn {
            padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer;
            font-size: 14px; font-weight: 500; transition: all 0.3s; text-decoration: none;
            display: inline-block; text-align: center; margin-right: 10px;
        }
        .btn-primary { background: #4CAF50; color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-danger { background: #dc3545; color: white; }
        .btn:hover { transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        table { width: 100%; border-collapse: collapse; border: 1px solid #ddd; }
        th, td { padding: 12px; border: 1px solid #ddd; text-align: left; }
        th { background: #f8f9fa; font-weight: 600; }
        tr:hover { background-color: #f8f9fa; }
        .summary-info {
            background: rgba(76, 175, 80, 0.1); padding: 20px; border-radius: 8px; margin-bottom: 20px;
            border-left: 4px solid #4CAF50;
        }
        .checkbox-cell { text-align: center; width: 50px; }
        .item-checkbox { transform: scale(1.2); cursor: pointer; }
        .empty-state {
            text-align: center; padding: 60px 20px; color: #666;
        }
        .empty-state h3 { margin-bottom: 10px; color: #333; }
        
        /* 로딩 스피너 스타일 */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .btn-loading {
            opacity: 0.7;
            cursor: not-allowed !important;
            pointer-events: none;
        }
        
        /* 중앙 로딩 대화상자 */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .loading-dialog {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            text-align: center;
            min-width: 300px;
        }
        
        .loading-dialog .big-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #28a745;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
        
        .loading-dialog h3 {
            margin: 0;
            color: #333;
            font-size: 18px;
            font-weight: 600;
        }
        
        .loading-dialog p {
            margin: 10px 0 0 0;
            color: #666;
            font-size: 14px;
        }
        
        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .container { padding: 0 10px; }
            .card-body { padding: 15px; }
            
            /* 모바일에서는 두 박스를 세로로 배치 */
            .action-boxes {
                flex-direction: column !important;
            }
            
            .action-box {
                min-width: unset !important;
                margin-bottom: 15px;
            }
            
            /* 버튼들을 모바일에서 더 작게 */
            .btn {
                padding: 8px 16px;
                font-size: 13px;
            }
            
            /* 요약정보 박스를 모바일에서 세로로 배치 */
            .summary-info {
                flex-direction: column !important;
                align-items: flex-start !important;
                gap: 15px;
            }
            
            .summary-info > div:last-child {
                align-self: stretch;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div style="display: flex; align-items: center;">
                <!-- <img src="/image/DSHI_logo.jpg" alt="DSHI Logo" style="width: 28px; height: 28px; margin-right: 8px;"> -->
                <h1 style="margin: 0;">DSHI</h1>
            </div>
            <div class="user-info">
                👤 <%= (@user_info && @user_info['username']) || 'Unknown' %>님 (Level <%= (@user_info && @user_info['permission_level']) || 'N/A' %>)
                <a href="/" class="nav-btn">🔍 Assembly 검색</a>
                <a href="/inspection-management" class="nav-btn">📝 검사신청 관리</a>
                <% if (@user_info && @user_info['permission_level'].to_i >= 3) %>
                <a href="/dashboard" class="nav-btn">📊 대시보드</a>
                <% end %>
                <a href="/logout" class="logout-btn">로그아웃</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card">
            <div class="card-header">
                📋 저장된 리스트
            </div>
            <div class="card-body">
                <!-- 디버그 정보 -->
                <div style="display: none; background: #fff3cd; padding: 10px; margin-bottom: 15px; border-radius: 4px; font-family: monospace; font-size: 12px;">
                    <strong>🐛 Debug Info:</strong><br>
                    @saved_list.nil?: <%= @saved_list.nil? %><br>
                    @saved_list.class: <%= @saved_list.class %><br>
                    @saved_list.size: <%= @saved_list.respond_to?(:size) ? @saved_list.size : 'N/A' %><br>
                    @saved_list.empty?: <%= @saved_list.respond_to?(:empty?) ? @saved_list.empty? : 'N/A' %><br>
                    First item: <%= @saved_list.respond_to?(:[]) && @saved_list.size > 0 ? @saved_list[0].inspect : 'N/A' %>
                </div>

                <!-- Excel 업로드 및 검사신청 섹션 (항상 표시) -->
                <div class="action-boxes" style="display: flex; gap: 20px; margin-bottom: 20px; flex-wrap: wrap;">
                    <!-- Excel 업로드 섹션 -->
                    <div class="action-box" style="background: rgba(76, 175, 80, 0.1); padding: 20px; border-radius: 8px; border-left: 4px solid #4CAF50; flex: 1; min-width: 300px;">
                        <h4 style="margin-bottom: 15px;">📊 Excel 업로드</h4>
                        <div style="display: flex; gap: 15px; align-items: end; flex-wrap: wrap;">
                            <div>
                                <label style="display: block; margin-bottom: 8px; font-weight: 500;">Excel 파일 선택</label>
                                <input type="file" id="excelFileInput" accept=".xlsx,.xls"
                                       style="padding: 8px; border: 2px solid #e1e5e9; border-radius: 6px; font-size: 14px; background: white;">
                            </div>
                            <div>
                                <button id="uploadExcelBtn" class="btn" style="background: #4CAF50; color: white;" disabled>업로드</button>
                            </div>
                            <div style="flex-grow: 1;">
                                <div id="uploadProgress" style="display: none; margin-top: 10px;">
                                    <div style="background: #f8f9fa; border-radius: 4px; padding: 8px; border: 1px solid #dee2e6;">
                                        <div id="progressText" style="font-size: 14px; color: #495057; margin-bottom: 5px;">📊 처리 중...</div>
                                        <div style="background: #e9ecef; height: 6px; border-radius: 3px; overflow: hidden;">
                                            <div id="progressBar" style="background: #4CAF50; height: 100%; width: 0%; transition: width 0.3s;"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="uploadInfo" style="margin-top: 15px; font-size: 14px; color: #666;">
                            💡 A열에 Assembly Code를 입력하세요 (최대 100개)
                        </div>
                    </div>

                    <!-- 검사신청 섹션 -->
                    <div class="action-box" style="background: rgba(76, 175, 80, 0.1); padding: 20px; border-radius: 8px; border-left: 4px solid #4CAF50; flex: 1; min-width: 300px;">
                        <h4 style="margin-bottom: 15px;">🔍 검사신청</h4>
                        <div style="display: flex; gap: 15px; align-items: end;">
                            <div>
                                <label style="display: block; margin-bottom: 8px; font-weight: 500;">검사신청일</label>
                                <input type="date" id="inspectionDate" 
                                       style="padding: 10px; border: 2px solid #e1e5e9; border-radius: 6px; font-size: 14px;"
                                       min="<%= Date.today.strftime("%Y-%m-%d") %>"
                                       value="<%= (Date.today + 1).strftime("%Y-%m-%d") %>">
                            </div>
                            <div>
                                <button id="createInspectionBtn" class="btn btn-success" disabled>검사신청</button>
                            </div>
                        </div>
                        <div id="selectedInfo" style="margin-top: 15px; font-size: 14px; color: #666;">
                            선택된 항목: 0개
                        </div>
                    </div>
                </div>

                <% if @saved_list.nil? || @saved_list.empty? %>
                    <div class="empty-state">
                        <h3>📭 저장된 항목이 없습니다</h3>
                        <p>조립품 검색에서 항목을 선택하고 저장하거나 Excel 파일로 업로드해보세요.</p>
                        <a href="/" class="btn btn-primary" style="margin-top: 20px;">🔍 조립품 검색하기</a>
                    </div>
                <% else %>
                    <div class="summary-info" id="summaryInfo" style="display: flex; justify-content: space-between; align-items: center;">
                        <div id="summaryText">
                            <strong>📊 요약 정보:</strong> 총 <%= (@saved_list && @saved_list.size) || 0 %>개 항목 | 총 중량: <%= (@total_weight && @total_weight.round(2)) || 0 %> kg
                        </div>
                        <div>
                            <button id="removeSelectedBtn" class="btn btn-danger" disabled>선택항목 삭제</button>
                        </div>
                    </div>

                    <div style="overflow-x: auto;">
                        <table id="savedListTable">
                            <thead>
                                <tr>
                                    <th class="checkbox-cell">
                                        <input type="checkbox" id="selectAllCheckbox">
                                    </th>
                                    <th>Assembly No</th>
                                    <th>Zone</th>
                                    <th>Item</th>
                                    <th>Weight(NET)</th>
                                    <th>Status</th>
                                    <th>Last Process</th>
                                </tr>
                            </thead>
                            <tbody id="savedListBody">
                                <% @saved_list.each_with_index do |assembly, index| %>
                                    <tr>
                                        <td class="checkbox-cell">
                                            <input type="checkbox" class="item-checkbox" data-index="<%= index %>" data-assembly='<%= assembly.to_json %>'>
                                        </td>
                                        <td><%= assembly['assembly_code'] || 'N/A' %></td>
                                        <td><%= assembly['zone'] || 'N/A' %></td>
                                        <td><%= assembly['item'] || 'N/A' %></td>
                                        <td style="text-align: right;"><%= assembly['weight_net'] || '0' %></td>
                                        <td><%= assembly['status'] || '-' %></td>
                                        <td><%= assembly['lastProcess'] || '-' %></td>
                                    </tr>
                                <% end %>
                            </tbody>
                        </table>
                    </div>
                <% end %>
            </div>
        </div>
    </div>

    <script>
        // 로딩 다이얼로그 함수들
        function showLoadingDialog(title = '🔍 검사신청 처리 중...', message = '잠시만 기다려주세요. 검사신청을 처리하고 있습니다.') {
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.id = 'loadingOverlay';
            overlay.innerHTML = `
                <div class="loading-dialog">
                    <div class="big-spinner"></div>
                    <h3>${title}</h3>
                    <p>${message}</p>
                </div>
            `;
            document.body.appendChild(overlay);
        }
        
        function hideLoadingDialog() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.remove();
            }
        }

        function updateSelectionButtons() {
            const selected = document.querySelectorAll('.item-checkbox:checked');
            const removeBtn = document.getElementById('removeSelectedBtn');
            const inspectionBtn = document.getElementById('createInspectionBtn');
            const selectedInfo = document.getElementById('selectedInfo');
            const summaryInfo = document.getElementById('summaryInfo');
            
            if (removeBtn) removeBtn.disabled = selected.length === 0;
            if (inspectionBtn) inspectionBtn.disabled = selected.length === 0;
            if (selectedInfo) selectedInfo.textContent = `선택된 항목: ${selected.length}개`;
            
            // 요약 정보 동적 업데이트 (버튼 구조 유지)
            const summaryTextDiv = document.getElementById('summaryText');
            if (summaryTextDiv) {
                if (selected.length > 0) {
                    let selectedWeight = 0;
                    Array.from(selected).forEach(checkbox => {
                        const assembly = JSON.parse(checkbox.dataset.assembly);
                        selectedWeight += parseFloat(assembly.weight_net || 0);
                    });
                    summaryTextDiv.innerHTML = `<strong>📊 요약 정보:</strong> 선택된 ${selected.length}개 항목 | 선택된 중량: ${selectedWeight.toFixed(2)} kg`;
                } else {
                    summaryTextDiv.innerHTML = `<strong>📊 요약 정보:</strong> 총 <%= (@saved_list && @saved_list.size) || 0 %>개 항목 | 총 중량: <%= (@total_weight && @total_weight.round(2)) || 0 %> kg`;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const isChecked = this.checked;
                    document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                        checkbox.checked = isChecked;
                    });
                    updateSelectionButtons();
                });
            }

            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectionButtons);
            });

            // Excel 업로드 기능
            const excelFileInput = document.getElementById('excelFileInput');
            const uploadExcelBtn = document.getElementById('uploadExcelBtn');
            const uploadProgress = document.getElementById('uploadProgress');
            const progressText = document.getElementById('progressText');
            const progressBar = document.getElementById('progressBar');
            const uploadInfo = document.getElementById('uploadInfo');

            if (excelFileInput) {
                excelFileInput.addEventListener('change', function() {
                    if (this.files && this.files[0]) {
                        uploadExcelBtn.disabled = false;
                        uploadInfo.textContent = `📎 선택된 파일: ${this.files[0].name}`;
                        uploadInfo.style.color = '#28a745';
                    } else {
                        uploadExcelBtn.disabled = true;
                        uploadInfo.textContent = '💡 A열에 Assembly Code를 입력하세요 (최대 100개)';
                        uploadInfo.style.color = '#666';
                    }
                });
            }

            if (uploadExcelBtn) {
                uploadExcelBtn.addEventListener('click', async function() {
                    const file = excelFileInput.files[0];
                    if (!file) {
                        alert('Excel 파일을 선택해주세요.');
                        return;
                    }

                    // 진행률 표시 시작
                    uploadProgress.style.display = 'block';
                    uploadExcelBtn.disabled = true;
                    progressText.textContent = '📊 Excel 파일 업로드 중...';
                    progressBar.style.width = '20%';

                    try {
                        const formData = new FormData();
                        formData.append('excel_file', file);

                        // 시뮬레이션: 파일 업로드 진행률
                        setTimeout(() => {
                            progressText.textContent = '📊 Excel 파일 파싱 중...';
                            progressBar.style.width = '40%';
                        }, 500);

                        setTimeout(() => {
                            progressText.textContent = '📊 Assembly Code 검증 중...';
                            progressBar.style.width = '60%';
                        }, 1500);

                        const response = await fetch('/api/upload-excel', {
                            method: 'POST',
                            body: formData
                        });

                        progressText.textContent = '📊 데이터 처리 중...';
                        progressBar.style.width = '80%';

                        const result = await response.json();

                        progressText.textContent = '📊 완료 처리 중...';
                        progressBar.style.width = '100%';

                        setTimeout(() => {
                            uploadProgress.style.display = 'none';
                            progressBar.style.width = '0%';
                            uploadExcelBtn.disabled = false;

                            if (result.success) {
                                const data = result.data;
                                let message = `✅ Excel 업로드 완료!\n\n`;
                                message += `📊 처리 결과:\n`;
                                message += `• 업로드된 항목: ${data.total_uploaded}개\n`;
                                message += `• 성공: ${data.valid_count}개 (저장리스트에 추가됨)\n`;
                                message += `• 실패: ${data.invalid_count}개\n`;
                                
                                if (data.saved_count > 0) {
                                    message += `• 신규 추가: ${data.saved_count}개\n`;
                                }
                                if (data.updated_count > 0) {
                                    message += `• 덮어쓰기: ${data.updated_count}개\n`;
                                }
                                
                                message += `\n현재 저장리스트 총 항목: ${data.total_in_list}개`;

                                if (data.invalid_codes && data.invalid_codes.length > 0) {
                                    message += `\n\n❌ 찾을 수 없는 Assembly Code:\n`;
                                    data.invalid_codes.forEach(code => {
                                        message += `- ${code}\n`;
                                    });
                                    if (data.invalid_count > data.invalid_codes.length) {
                                        message += `... 외 ${data.invalid_count - data.invalid_codes.length}개`;
                                    }
                                }

                                alert(message);
                                
                                // 파일 입력 초기화
                                excelFileInput.value = '';
                                uploadExcelBtn.disabled = true;
                                uploadInfo.textContent = '💡 A열에 Assembly Code를 입력하세요 (최대 100개)';
                                uploadInfo.style.color = '#666';
                                
                                // 페이지 새로고침으로 저장리스트 업데이트
                                location.reload();
                            } else {
                                alert(`❌ Excel 업로드 실패:\n${result.error}`);
                            }
                        }, 500);

                    } catch (error) {
                        uploadProgress.style.display = 'none';
                        progressBar.style.width = '0%';
                        uploadExcelBtn.disabled = false;
                        alert(`❌ 업로드 오류: ${error.message}`);
                    }
                });
            }

            const removeSelectedBtn = document.getElementById('removeSelectedBtn');
            if (removeSelectedBtn) {
                removeSelectedBtn.addEventListener('click', async function() {
                    const selected = document.querySelectorAll('.item-checkbox:checked');
                    if (selected.length > 0) {
                        const selectedData = Array.from(selected).map(cb => JSON.parse(cb.dataset.assembly));
                        const assemblyCodes = selectedData.map(item => item.assembly_code);
                        
                        // 로딩 스피너 표시
                        showLoadingDialog('🗑️ 항목 삭제 중...', '잠시만 기다려주세요. 선택된 항목을 삭제하고 있습니다.');
                        
                        try {
                            const response = await fetch('/api/remove-from-saved-list', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ items: assemblyCodes })
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                // 삭제 완료 후 새로고침 스피너로 변경
                                showLoadingDialog('🔄 새로고침 중...', '삭제가 완료되었습니다. 페이지를 새로고침하고 있습니다.');
                                
                                // 페이지 새로고침
                                location.reload();
                            } else {
                                // 로딩 숨기기
                                hideLoadingDialog();
                                
                                alert(`❌ 삭제 실패: ${result.error}`);
                            }
                        } catch (error) {
                            // 로딩 숨기기
                            hideLoadingDialog();
                            
                            alert(`❌ 삭제 오류: ${error.message}`);
                        }
                    }
                });
            }

            const createInspectionBtn = document.getElementById('createInspectionBtn');
            if (createInspectionBtn) {
                createInspectionBtn.addEventListener('click', async function() {
                    const selected = document.querySelectorAll('.item-checkbox:checked');
                    const inspectionDate = document.getElementById('inspectionDate').value;
                    
                    if (selected.length === 0) {
                        alert('검사신청할 항목을 선택해주세요.');
                        return;
                    }
                    
                    if (!inspectionDate) {
                        alert('검사신청일을 선택해주세요.');
                        return;
                    }
                    
                    const selectedData = Array.from(selected).map(cb => JSON.parse(cb.dataset.assembly));
                    
                    // 다음 공정 검증 (ProcessManager와 동일한 로직)
                    const nextProcesses = selectedData.map(assembly => {
                        // 공정 순서에 따른 다음 공정 계산
                        const processes = ['fit_up_date', 'final_date', 'arup_final_date', 'galv_date', 'arup_galv_date', 'shot_date', 'paint_date', 'arup_paint_date'];
                        const processNames = ['FIT_UP', 'FINAL', 'ARUP_FINAL', 'GALV', 'ARUP_GALV', 'SHOT', 'PAINT', 'ARUP_PAINT'];
                        
                        for (let i = 0; i < processes.length; i++) {
                            const date = assembly[processes[i]];
                            
                            // 1900-01-01인 경우 불필요한 공정으로 건너뛰기
                            if (date && (date.includes('1900') || date === '1900-01-01')) {
                                continue;
                            }
                            
                            // 날짜가 없거나 비어있는 경우 미완료 공정
                            if (!date || date === '') {
                                return processNames[i];
                            }
                            
                            // 실제 날짜가 있는 경우 완료된 공정이므로 계속 진행
                        }
                        return null; // 모든 공정 완료
                    });
                    
                    const uniqueProcesses = [...new Set(nextProcesses.filter(p => p !== null))];
                    
                    // 모든 항목이 완료된 경우
                    if (uniqueProcesses.length === 0) {
                        alert('❌ 검사신청 불가\n선택한 항목들은 이미 모든 공정이 완료되었습니다.');
                        return;
                    }
                    
                    if (uniqueProcesses.length > 1) {
                        const processNames = uniqueProcesses.map(p => {
                            switch(p) {
                                case 'FIT_UP': return 'FIT-UP 검사';
                                case 'FINAL': return 'FINAL 검사';
                                case 'ARUP_FINAL': return 'ARUP FINAL 검사';
                                case 'GALV': return 'GALV 검사';
                                case 'ARUP_GALV': return 'ARUP GALV 검사';
                                case 'SHOT': return 'SHOT 검사';
                                case 'PAINT': return 'PAINT 검사';
                                case 'ARUP_PAINT': return 'ARUP PAINT 검사';
                                default: return p;
                            }
                        }).join(', ');

                        alert(`❌ 검사신청 오류\n선택된 조립품들의 다음 공정이 다릅니다.\n동일한 공정의 조립품만 선택해주세요.\n다음 공정들: ${processNames}`);
                        return;
                    }
                    
                    const commonProcess = uniqueProcesses[0];
                    let processKoreanName = '';
                    switch(commonProcess) {
                        case 'FIT_UP': processKoreanName = 'FIT-UP'; break;
                        case 'FINAL': processKoreanName = 'FINAL'; break;
                        case 'ARUP_FINAL': processKoreanName = 'ARUP FINAL'; break;
                        case 'GALV': processKoreanName = 'GALV'; break;
                        case 'ARUP_GALV': processKoreanName = 'ARUP GALV'; break;
                        case 'SHOT': processKoreanName = 'SHOT'; break;
                        case 'PAINT': processKoreanName = 'PAINT'; break;
                        case 'ARUP_PAINT': processKoreanName = 'ARUP PAINT'; break;
                        default: processKoreanName = commonProcess;
                    }
                    
                    const assemblyCodes = selectedData.map(item => item.assembly_code);
                    
                    const now = new Date();
                    const dateStr = now.getFullYear() + '년 ' + (now.getMonth() + 1) + '월 ' + now.getDate() + '일 ' + 
                                   now.getHours() + '시 ' + now.getMinutes() + '분';
                    
                    if (!confirm(`검사신청 확인\n• 대상: ${selected.length}개 항목\n• 다음 공정: ${processKoreanName} 검사\n• 검사일: ${inspectionDate}\n\n검사신청하시겠습니까?`)) {
                        return;
                    }
                    
                    // 로딩 스피너 표시
                    showLoadingDialog();
                    
                    try {
                        const response = await fetch('/api/create-inspection-request', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                assembly_codes: assemblyCodes,
                                inspection_type: commonProcess,
                                request_date: inspectionDate
                            })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            const responseData = result.data;
                            let message = `✅ 검사신청이 성공적으로 생성되었습니다!\n\n📋 신청 항목: ${selectedData.length}개 (${processKoreanName})\n📅 검사일: ${inspectionDate}\n📅 신청 시간: ${dateStr}`;

                            if (responseData.inserted_count > 0) {
                                message += `\n✅ 성공: ${responseData.inserted_count}개`;
                            }
                            
                            if (responseData.duplicate_items && responseData.duplicate_items.length > 0) {
                                message += `\n⚠️ 중복: ${responseData.duplicate_items.length}개 (이미 신청됨)`;
                                responseData.duplicate_items.forEach(item => {
                                    message += `\n  - ${item.assembly_code}: ${item.existing_requester}님이 ${item.existing_date}에 신청`;
                                });
                            }
                            
                            // 로딩 숨기기
                            hideLoadingDialog();
                            
                            alert(message);
                            location.reload();
                        } else {
                            // 로딩 숨기기
                            hideLoadingDialog();
                            
                            alert(`❌ 검사신청 실패: ${result.error}`);
                        }
                    } catch (error) {
                        // 로딩 숨기기
                        hideLoadingDialog();
                        
                        alert(`❌ 검사신청 오류: ${error.message}`);
                    }
                });
            }
        });
    </script>
</body>
</html>